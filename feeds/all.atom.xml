<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>pandas blog</title><link href="https://dev.pandas.io/pandas-blog/" rel="alternate"></link><link href="https://dev.pandas.io/pandas-blog/feeds/all.atom.xml" rel="self"></link><id>https://dev.pandas.io/pandas-blog/</id><updated>2020-11-19T00:00:00-06:00</updated><entry><title>Pandas receives CZI Funding</title><link href="https://dev.pandas.io/pandas-blog/pandas-receives-czi-funding.html" rel="alternate"></link><published>2020-11-19T00:00:00-06:00</published><updated>2020-11-19T00:00:00-06:00</updated><author><name>Pandas Development Team</name></author><id>tag:dev.pandas.io,2020-11-19:/pandas-blog/pandas-receives-czi-funding.html</id><summary type="html">&lt;p&gt;We're excited to share that pandas has received a grant from the Chan Zuckerberg Initiative's Essential Open Source Software for Science program. This grant will fund two work items:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We've dedicate funding specifically to maintenace. pandas is a large and popular project, but has little time from maintainer's employers officially …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;We're excited to share that pandas has received a grant from the Chan Zuckerberg Initiative's Essential Open Source Software for Science program. This grant will fund two work items:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We've dedicate funding specifically to maintenace. pandas is a large and popular project, but has little time from maintainer's employers officially dedicated to work on pandas. We'll pay maintainers to do the work necessary to keep the pandas project and community humming along. We appreciate that the EOSS program explicitly includes maintenance as an item they're willing to support.&lt;/li&gt;
&lt;li&gt;We'll continue to improve pandas' &lt;a href="https://pandas.pydata.org/docs/dev/development/roadmap.html#consistent-missing-value-handling"&gt;nullable data types&lt;/a&gt;. Recent releases included experimental nullable integer and boolean dtypes. These prototypes show a promising future, but many parts of the library need to be updated to work with nullable data types. With this funding we hope to implement nullable data types that are appropriate to be used by default for all operations in pandas.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more, read the &lt;a href="https://github.com/TomAugspurger/pandas-czi/blob/6c36c5a1dcb5d9996b5910c27d534be7612acb3f/proposal.md"&gt;full proposal&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Read more about the program and other projects funded in &lt;a href="https://chanzuckerberg.com/newsroom/czi-awards-4-7-million-for-open-source-software-and-organizations-advancing-open-science/"&gt;the announcement&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>pandas 1.0</title><link href="https://dev.pandas.io/pandas-blog/pandas-10.html" rel="alternate"></link><published>2020-01-29T00:00:00-06:00</published><updated>2020-01-29T00:00:00-06:00</updated><author><name>Pandas Development Team</name></author><id>tag:dev.pandas.io,2020-01-29:/pandas-blog/pandas-10.html</id><summary type="html">&lt;p&gt;Today pandas celebrates its 1.0.0 release. In many ways this is just a normal release with a host of new features, performance improvements, and bug fixes, which are documented in our &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;release notes&lt;/a&gt;. But it’s also something a bit more — a milestone for the project beyond just …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Today pandas celebrates its 1.0.0 release. In many ways this is just a normal release with a host of new features, performance improvements, and bug fixes, which are documented in our &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;release notes&lt;/a&gt;. But it’s also something a bit more — a milestone for the project beyond just the commits. We wanted to take some time to reflect on where we've been and where we're going.&lt;/p&gt;
&lt;h2&gt;Reflections&lt;/h2&gt;
&lt;p&gt;The world of scientific Python has changed a lot since pandas was started.  In 2011, &lt;a href="https://wesmckinney.com/blog/a-roadmap-for-rich-scientific-data-structures-in-python/"&gt;the ecosystem was fragmented&lt;/a&gt;: a standard &lt;em&gt;rich&lt;/em&gt; data structure for statistics and data science had yet to emerge. This echos a similar story for NumPy, which consolidated array efforts that were &lt;a href="https://numpy.org/old_array_packages.html"&gt;previously fragmented&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Over the subsequent years, pandas emerged as a &lt;em&gt;de facto&lt;/em&gt; standard. It’s used by data scientists and analysts and as a data structure for other libraries to build on top of. StackOverflow &lt;a href="https://stackoverflow.blog/2017/09/14/python-growing-quickly/"&gt;cited pandas&lt;/a&gt; as one of the reasons for Python being the fastest growing major programming language.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Growth of pandas" src="https://149351115.v2.pressablecdn.com/wp-content/uploads/2017/09/related_tags_over_time-1-1000x1000.png"&gt;&lt;/p&gt;
&lt;p&gt;Today, the ecosystem is in another phase of exploration.
Several new DataFrame implementations are cropping up to fill needs not met by pandas.
We're &lt;a href="https://datapythonista.me/blog/dataframe-summit-at-euroscipy.html"&gt;working with those projects&lt;/a&gt; to establish shared standards and semantics for rich data structures.&lt;/p&gt;
&lt;h2&gt;Community and Project Health&lt;/h2&gt;
&lt;p&gt;This release cycle is the first to involve any kind of grant funding for pandas. &lt;a href="https://chanzuckerberg.com/eoss/proposals/"&gt;Pandas received funding&lt;/a&gt; as part of the CZI’s &lt;a href="https://medium.com/@cziscience/the-invisible-foundations-of-biomedicine-4ab7f8d4f5dd"&gt;&lt;em&gt;Essential Open Source Software for Science&lt;/em&gt;&lt;/a&gt; &lt;a href="https://medium.com/@cziscience/the-invisible-foundations-of-biomedicine-4ab7f8d4f5dd"&gt;program&lt;/a&gt;. The pandas project relies overwhelmingly on volunteer contributors. These volunteer contributions are shepherded and augmented by some maintainers who are given time from their employers — our &lt;a href="https://github.com/pandas-dev/pandas-governance/blob/master/people.md#institutional-partners"&gt;institutional partners&lt;/a&gt;. The largest work item in our grant award was library maintenance, which specifically includes working with community members to address our large backlog of open issues and pull requests.&lt;/p&gt;
&lt;p&gt;While a “1.0.0” version might seem arbitrary or anti-climactic (given that pandas as a codebase is nearly 12 years old), we see it as a symbolic milestone celebrating the growth of our core developer team and depth of our contributor base.  Few open source projects are ever truly “done” and pandas is no different. We recognize the essential role that pandas now occupies, and we intend to continue to evolve the project and adapt to the needs of the world’s data wranglers.  &lt;/p&gt;
&lt;h1&gt;Going Forward&lt;/h1&gt;
&lt;p&gt;Our &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/development/roadmap.html"&gt;roadmap&lt;/a&gt; contains an up-to-date listing of where we see the project heading over the next few years.
Needless to say, there's still plenty to do.&lt;/p&gt;
&lt;p&gt;Check out the &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/whatsnew/v1.0.0.html"&gt;release notes&lt;/a&gt; and visit the &lt;a href="https://pandas.pydata.org/pandas-docs/version/1.0.0/getting_started/install.html"&gt;installation page&lt;/a&gt; for instructions on updating to pandas 1.0.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>2019 Pandas User Survey</title><link href="https://dev.pandas.io/pandas-blog/2019-pandas-user-survey.html" rel="alternate"></link><published>2019-08-22T00:00:00-05:00</published><updated>2019-08-22T00:00:00-05:00</updated><author><name>Pandas Development Team</name></author><id>tag:dev.pandas.io,2019-08-22:/pandas-blog/2019-pandas-user-survey.html</id><summary type="html">&lt;style type="text/css"&gt;
table td {
    background: none;
}

table tr.even td {
    background: none;
}

table {
    text-shadow: none;
}

&lt;/style&gt;

&lt;p&gt;Pandas recently conducted a user survey to help guide future development.
Thanks to everyone who participated! This post presents the high-level results.&lt;/p&gt;
&lt;p&gt;This analysis and the raw data can be found &lt;a href="https://github.com/pandas-dev/pandas-user-surveys"&gt;on GitHub&lt;/a&gt; and run on Binder …&lt;/p&gt;</summary><content type="html">&lt;style type="text/css"&gt;
table td {
    background: none;
}

table tr.even td {
    background: none;
}

table {
    text-shadow: none;
}

&lt;/style&gt;

&lt;p&gt;Pandas recently conducted a user survey to help guide future development.
Thanks to everyone who participated! This post presents the high-level results.&lt;/p&gt;
&lt;p&gt;This analysis and the raw data can be found &lt;a href="https://github.com/pandas-dev/pandas-user-surveys"&gt;on GitHub&lt;/a&gt; and run on Binder&lt;/p&gt;
&lt;p&gt;&lt;a href="https://mybinder.org/v2/gh/pandas-dev/pandas-user-surveys/master?filepath=2019.ipynb"&gt;&lt;img alt="Binder" src="https://mybinder.org/badge_logo.svg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We had about 1250 repsonses over the 15 days we ran the survey in the summer of 2019.&lt;/p&gt;
&lt;h1&gt;About the Respondents&lt;/h1&gt;
&lt;p&gt;There was a fair amount of representation across pandas experience and frequeny of use, though the majority of respondents are on the more experienced side.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_4_0.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_5_0.png"&gt;&lt;/p&gt;
&lt;p&gt;We included a few questions that were also asked in the &lt;a href="https://www.jetbrains.com/research/python-developers-survey-2018/"&gt;Python Developers Survey&lt;/a&gt; so we could compare Pandas' population to Python's. &lt;/p&gt;
&lt;p&gt;90% of our respondents use Python as a primary language (compared with 84% from the PSF survey).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Yes    90.67%&lt;/span&gt;
&lt;span class="err"&gt;No      9.33%&lt;/span&gt;
&lt;span class="c"&gt;Name: Is Python your main language?, dtype: object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Windows users are well represented (see &lt;a href="https://www.youtube.com/watch?v=uoI57uMdDD4"&gt;Steve Dower's talk&lt;/a&gt; on this topic).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Linux      61.57%&lt;/span&gt;
&lt;span class="err"&gt;Windows    60.21%&lt;/span&gt;
&lt;span class="err"&gt;MacOS      42.75%&lt;/span&gt;
&lt;span class="c"&gt;Name: What Operating Systems do you use?, dtype: object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For environment isolation, &lt;a href="https://conda.io/en/latest/"&gt;conda&lt;/a&gt; was the most popular.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_13_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Most repondents are Python 3 only.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;3        92.39%&lt;/span&gt;
&lt;span class="err"&gt;2 &amp;amp; 3     6.80%&lt;/span&gt;
&lt;span class="err"&gt;2         0.81%&lt;/span&gt;
&lt;span class="c"&gt;Name: Python 2 or 3?, dtype: object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Pandas APIs&lt;/h2&gt;
&lt;p&gt;It can be hard for open source projects to know what features are actually used. We asked a few questions to get an idea.&lt;/p&gt;
&lt;p&gt;CSV and Excel are (for better or worse) the most popular formats.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_18_0.png"&gt;&lt;/p&gt;
&lt;p&gt;In preperation for a possible refactor of pandas internals, we wanted to get a sense for
how common wide (100s of columns or more) DataFrames are.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_20_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Pandas is slowly growing new exentension types. Categoricals are the most popular,
and the nullable integer type is already almost as popular as datetime with timezone.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_22_0.png"&gt;&lt;/p&gt;
&lt;p&gt;More and better examples seem to be a high-priority development item.
Pandas recently received a NumFOCUS grant to improve our documentation,
which we're using to write tutorial-style documentation, which should help
meet this need.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_24_0.png"&gt;&lt;/p&gt;
&lt;p&gt;We also asked about specific, commonly-requested features.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_26_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Of these, the clear standout is "scaling" to large datasets. A couple observations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Perhaps pandas' documentation should do a better job of promoting libraries that provide scalable dataframes (like &lt;a href="https://dask.org"&gt;Dask&lt;/a&gt;, &lt;a href="https://dask.org"&gt;vaex&lt;/a&gt;, and &lt;a href="https://modin.readthedocs.io/en/latest/"&gt;modin&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Memory efficiency (perhaps from a native string data type, fewer internal copies, etc.) is a valuable goal.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that, the next-most critical improvement is integer missing values. Those were actually added in &lt;a href="https://pandas.pydata.org/pandas-docs/stable/whatsnew/v0.24.0.html#optional-integer-na-support"&gt;Pandas 0.24&lt;/a&gt;, but they're not the default, and there's still some incompatibilites with the rest of pandas API.&lt;/p&gt;
&lt;p&gt;Pandas is a less conservative library than, say, NumPy. We're approaching 1.0, but on the way we've made many deprecations and some outright API breaking changes. Fortunately, most people are OK with the tradeoff.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;Yes    94.89%&lt;/span&gt;
&lt;span class="err"&gt;No      5.11%&lt;/span&gt;
&lt;span class="c"&gt;Name: Is Pandas stable enough for you?, dtype: object&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There's a perception (which is shared by many of the pandas maintainers) that the pandas API is too large. To measure that, we asked whether users thought that pandas' API was too large, too small, or just right.&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_31_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Finally, we asked for an overall satisfaction with the library, from 1 (not very unsatisfied) to 5 (very satisfied).&lt;/p&gt;
&lt;p&gt;&lt;img alt="png" src="https://dev.pandas.io/pandas-blog/images/2019_files/2019_33_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Most people are very satisfied. The average response is 4.39. I look forward to tracking this number over time.&lt;/p&gt;
&lt;p&gt;If you're analyzing the raw data, be sure to share the results with us &lt;a href="https://twitter.com/pandas_dev"&gt;@pandas_dev&lt;/a&gt;.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Pandas Extension Arrays</title><link href="https://dev.pandas.io/pandas-blog/pandas-extension-arrays.html" rel="alternate"></link><published>2019-01-04T00:00:00-06:00</published><updated>2019-01-04T00:00:00-06:00</updated><author><name>Pandas Development Team</name></author><id>tag:dev.pandas.io,2019-01-04:/pandas-blog/pandas-extension-arrays.html</id><summary type="html">&lt;p&gt;Extensibility was a major theme in pandas development over the last couple of
releases. This post introduces the pandas extension array interface: the
motivation behind it and how it might affect you as a pandas user. Finally, we
look at how extension arrays may shape the future of pandas.&lt;/p&gt;
&lt;p&gt;Extension …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Extensibility was a major theme in pandas development over the last couple of
releases. This post introduces the pandas extension array interface: the
motivation behind it and how it might affect you as a pandas user. Finally, we
look at how extension arrays may shape the future of pandas.&lt;/p&gt;
&lt;p&gt;Extension Arrays are just one of the changes in pandas 0.24.0. See the
&lt;a href="http://pandas.pydata.org/pandas-docs/version/0.24/whatsnew/v0.24.0.html"&gt;whatsnew&lt;/a&gt; for a full changelog.&lt;/p&gt;
&lt;h2&gt;The Motivation&lt;/h2&gt;
&lt;p&gt;Pandas is built on top of NumPy. You could roughly define a Series as a wrapper
around a NumPy array, and a DataFrame as a collection of Series with a shared
index. That's not entirely correct for several reasons, but I want to focus on
the "wrapper around a NumPy array" part. It'd be more correct to say "wrapper
around an array-like object".&lt;/p&gt;
&lt;p&gt;Pandas mostly uses NumPy's builtin data representation; we've restricted it in
places and extended it in others. For example, pandas' early users cared greatly
about timezone-aware datetimes, which NumPy doesn't support. So pandas
internally defined a &lt;code&gt;DatetimeTZ&lt;/code&gt; dtype (which mimics a NumPy dtype), and
allowed you to use that dtype in &lt;code&gt;Index&lt;/code&gt;, &lt;code&gt;Series&lt;/code&gt;, and as a column in a
&lt;code&gt;DataFrame&lt;/code&gt;. That dtype carried around the tzinfo, but wasn't itself a valid
NumPy dtype.&lt;/p&gt;
&lt;p&gt;As another example, consider &lt;code&gt;Categorical&lt;/code&gt;. This actually composes &lt;em&gt;two&lt;/em&gt; arrays:
one for the &lt;code&gt;categories&lt;/code&gt; and one for the &lt;code&gt;codes&lt;/code&gt;. But it can be stored in a
&lt;code&gt;DataFrame&lt;/code&gt; like any other column.&lt;/p&gt;
&lt;p&gt;Each of these extension types pandas added is useful on its own, but carries a
high maintenance cost. Large sections of the codebase need to be aware of how to
handle a NumPy array or one of these other kinds of special arrays. This made
adding new extension types to pandas very difficult.&lt;/p&gt;
&lt;p&gt;Anaconda, Inc. had a client who regularly dealt with datasets with IP addresses.
They wondered if it made sense to add an &lt;a href="https://github.com/pandas-dev/pandas/issues/18767"&gt;IPArray&lt;/a&gt; to pandas. In the
end, we didn't think it passed the cost-benefit test for inclusion in pandas
&lt;em&gt;itself&lt;/em&gt;, but we were interested in defining an interface for third-party
extensions to pandas. Any object implementing this interface would be allowed in
pandas. I was able to write &lt;a href="https://cyberpandas.readthedocs.io"&gt;cyberpandas&lt;/a&gt; outside of pandas, but it
feels like using any other dtype built into pandas.&lt;/p&gt;
&lt;h2&gt;The Current State&lt;/h2&gt;
&lt;p&gt;As of pandas 0.24.0, all of pandas' internal extension arrays (Categorical,
Datetime with Timezone, Period, Interval, and Sparse) are now built on top of
the ExtensionArray interface. Users shouldn't notice many changes. The main
thing you'll notice is that things are cast to &lt;code&gt;object&lt;/code&gt; dtype in fewer places,
meaning your code will run faster and your types will be more stable. This
includes storing &lt;code&gt;Period&lt;/code&gt; and &lt;code&gt;Interval&lt;/code&gt; data in &lt;code&gt;Series&lt;/code&gt; (which were previously
cast to object dtype).&lt;/p&gt;
&lt;p&gt;Additionally, we'll be able to add &lt;em&gt;new&lt;/em&gt; extension arrays with relative ease.
For example, 0.24.0 (optionally) solved one of pandas longest-standing pain
points: missing values casting integer-dtype values to float.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;int64&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reindex&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mf"&gt;1.0&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;NaN&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mf"&gt;2.0&lt;/span&gt;
&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;float64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With the new &lt;a href="http://pandas.pydata.org/pandas-docs/version/0.24/reference/api/pandas.arrays.IntegerArray.html"&gt;IntegerArray&lt;/a&gt; and nullable integer dtypes, we can
natively represent integer data with missing values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int64Dtype&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;int_ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reindex&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;      &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;NaN&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;      &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Int64&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing it does slightly change how you should access the raw (unlabeled)
arrays stored inside a Series or Index, which is occasionally useful. Perhaps
the method you're calling only works with NumPy arrays, or perhaps you want to
disable automatic alignment.&lt;/p&gt;
&lt;p&gt;In the past, you'd hear things like "Use &lt;code&gt;.values&lt;/code&gt; to extract the NumPy array
from a Series or DataFrame." If it were a good resource, they'd tell you that's
not &lt;em&gt;entirely&lt;/em&gt; true, since there are some exceptions. I'd like to delve into
those exceptions.&lt;/p&gt;
&lt;p&gt;The fundamental problem with &lt;code&gt;.values&lt;/code&gt; is that it serves two purposes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extracting the array backing a Series, Index, or DataFrame&lt;/li&gt;
&lt;li&gt;Converting the Series, Index, or DataFrame to a NumPy array&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As we saw above, the "array" backing a Series or Index might not be a NumPy
array, it may instead be an extension array (from pandas or a third-party
library). For example, consider &lt;code&gt;Categorical&lt;/code&gt;,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Categorical&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;categories&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ser&lt;/span&gt;
&lt;span class="mi"&gt;0&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;    &lt;span class="n"&gt;a&lt;/span&gt;
&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;
&lt;span class="n"&gt;Categories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Categories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this case &lt;code&gt;.values&lt;/code&gt; is a Categorical, not a NumPy array. For period-dtype
data, &lt;code&gt;.values&lt;/code&gt; returns a NumPy array of &lt;code&gt;Period&lt;/code&gt; objects, which is expensive to
create. For timezone-aware data, &lt;code&gt;.values&lt;/code&gt; converts to UTC and &lt;em&gt;drops&lt;/em&gt; the
timezone info. These kind of surprises (different types, or expensive or lossy
conversions) stem from trying to shoehorn these extension arrays into a NumPy
array. But the entire point of an extension array is for representing data NumPy
&lt;em&gt;can't&lt;/em&gt; natively represent.&lt;/p&gt;
&lt;p&gt;To solve the &lt;code&gt;.values&lt;/code&gt; problem, we've split its roles into two dedicated methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use &lt;code&gt;.array&lt;/code&gt; to get a zero-copy reference to the underlying data&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;.to_numpy()&lt;/code&gt; to get a (potentially expensive, lossy) NumPy array of the
   data.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So with our Categorical example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;Categories&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_numpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.array&lt;/code&gt; will &lt;em&gt;always&lt;/em&gt; be a an ExtensionArray, and is always a zero-copy
   reference back to the data.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.to_numpy()&lt;/code&gt; is &lt;em&gt;always&lt;/em&gt; a NumPy array, so you can reliably call
   ndarray-specific methods on it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You shouldn't ever need &lt;code&gt;.values&lt;/code&gt; anymore.&lt;/p&gt;
&lt;h2&gt;Possible Future Paths&lt;/h2&gt;
&lt;p&gt;Extension Arrays open up quite a few exciting opportunities. Currently, pandas
represents string data using Python objects in a NumPy array, which is slow.
Libraries like &lt;a href="https://arrow.apache.org"&gt;Apache Arrow&lt;/a&gt; provide native support for variable-length
strings, and the &lt;a href="https://github.com/xhochy/fletcher"&gt;Fletcher&lt;/a&gt; library provides pandas extension arrays
for Arrow arrays. It will allow &lt;a href="https://github.com/geopandas/geopandas"&gt;GeoPandas&lt;/a&gt; to store geometry data
more efficiently. Pandas (or third-party libraries) will be able to support
nested data, data with units, geo data, GPU arrays. Keep an eye on the
&lt;a href="http://pandas.pydata.org/pandas-docs/stable/ecosystem.html#extension-data-types"&gt;pandas ecosystem&lt;/a&gt; page, which will keep track of third-party extension
arrays. It's an exciting time for pandas development.&lt;/p&gt;
&lt;h2&gt;Other Thoughts&lt;/h2&gt;
&lt;p&gt;I'd like to emphasize that this is an &lt;em&gt;interface&lt;/em&gt;, and not a concrete array
implementation. We are &lt;em&gt;not&lt;/em&gt; reimplementing NumPy here in pandas. Rather, this
is a way to take any array-like data structure (one or more NumPy arrays, an
Apache Arrow array, a CuPy array) and place it inside a DataFrame. I think
getting pandas out of the array business, and instead thinking about
higher-level tabular data things, is a healthy development for the project.&lt;/p&gt;
&lt;p&gt;This works perfectly with NumPy's &lt;a href="https://docs.scipy.org/doc/numpy-1.13.0/neps/ufunc-overrides.html"&gt;&lt;code&gt;__array_ufunc__&lt;/code&gt;&lt;/a&gt; protocol and
&lt;a href="https://www.numpy.org/neps/nep-0018-array-function-protocol.html"&gt;NEP-18&lt;/a&gt;. You'll be able to use the familiar NumPy API on objects that
aren't backed by NumPy memory.&lt;/p&gt;
&lt;h2&gt;Upgrade&lt;/h2&gt;
&lt;p&gt;These new goodies are all available in the recently released pandas 0.24.&lt;/p&gt;
&lt;p&gt;conda:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;conda install -c conda-forge pandas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;pip:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="err"&gt;pip install --upgrade pandas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As always, we're happy to hear feedback on the &lt;a href="https://mail.python.org/mailman/listinfo/pandas-dev"&gt;mailing list&lt;/a&gt;,
&lt;a href="https://twitter.com/pandas_dev"&gt;@pandas-dev&lt;/a&gt;, or &lt;a href="https://github.com/pandas-dev/pandas/issues"&gt;issue tracker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks to the many contributors, maintainers, and &lt;a href="https://github.com/pandas-dev/pandas-governance/blob/master/people.md"&gt;institutional
partners&lt;/a&gt; involved in the pandas community.&lt;/p&gt;</content><category term="misc"></category></entry></feed>